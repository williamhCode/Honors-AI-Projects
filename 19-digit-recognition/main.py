# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'digit.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QGraphicsScene, QGraphicsView, QGraphicsItem, QWidget
from PyQt5.QtGui import QPen, QBrush, QPainter, QColor, QFont
from PyQt5.Qt import Qt

import types
import random
import threading
import copy

from neuron import _neuron


OriginalList = []

SpinValue = 0
NumberList = []
ErrorList = []

LoopValue = 0
TrainingList = []

NeuronList = []

DeterminedValue = -1
determined = False

HasTrained = False


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(846, 639)
        MainWindow.setFixedSize(MainWindow.size())
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        style = "background-color: rgb(255,255,255); border:1px solid rgb(180, 180, 180); "
        self.LeftGraphics = leftFrame(self.centralwidget)
        self.LeftGraphics.setGeometry(QtCore.QRect(20, 20, 200, 280))
        self.LeftGraphics.setObjectName("LeftGraphics")
        self.LeftGraphics.setAttribute(QtCore.Qt.WA_StyledBackground)
        self.LeftGraphics.setStyleSheet(style)

        self.CentralGraphics = centralFrame(self.centralwidget)
        self.CentralGraphics.setGeometry(QtCore.QRect(240, 20, 355, 497))
        self.CentralGraphics.setObjectName("CentralGraphics")
        self.CentralGraphics.setAttribute(QtCore.Qt.WA_StyledBackground)
        self.CentralGraphics.setStyleSheet(style)

        self.RightGraphics = rightFrame(self.centralwidget)
        self.RightGraphics.setGeometry(QtCore.QRect(620, 20, 200, 280))
        self.RightGraphics.setObjectName("RightGraphics")
        self.RightGraphics.setAttribute(QtCore.Qt.WA_StyledBackground)
        self.RightGraphics.setStyleSheet(style)

        self.Button4 = QtWidgets.QPushButton(self.centralwidget)
        self.Button4.setGeometry(QtCore.QRect(450, 540, 141, 31))
        self.Button4.setObjectName("Button4")
        self.Button3 = QtWidgets.QPushButton(self.centralwidget)
        self.Button3.setGeometry(QtCore.QRect(650, 310, 141, 31))
        self.Button3.setObjectName("Button3")
        self.Button2 = QtWidgets.QPushButton(self.centralwidget)
        self.Button2.setGeometry(QtCore.QRect(300, 540, 141, 31))
        self.Button2.setObjectName("Button2")
        self.Button1 = QtWidgets.QPushButton(self.centralwidget)
        self.Button1.setGeometry(QtCore.QRect(40, 310, 160, 61))
        self.Button1.setObjectName("Button1")
        self.SpinBox = QtWidgets.QSpinBox(self.centralwidget)
        self.SpinBox.setGeometry(QtCore.QRect(240, 540, 51, 31))
        self.SpinBox.setObjectName("SpinBox")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 846, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.Button1.clicked.connect(self.Button1Pressed)
        self.Button2.clicked.connect(self.Button2Pressed)
        self.Button3.clicked.connect(self.Button3Pressed)
        self.Button4.clicked.connect(self.Button4Pressed)

        self.SpinBox.valueChanged.connect(self.SpinChanged)
        self.SpinBox.setMaximum(9)
        global SpinValue
        SpinValue = self.SpinBox.value()

        global OriginalList
        OriginalList = [[0]*35 for i in range(10)]
        file = open("digits.txt", "r")
        i = 0
        for line in file:
            line = line.replace(' ', '')
            line = line.replace('\n', '')
            j = 0
            for character in line:
                OriginalList[i][j] = int(character)
                j += 1
            i += 1

        global NumberList
        NumberList = copy.deepcopy(OriginalList)

        global ErrorList
        ErrorList = [[0, 1, 1, 1, 1,
                      1, 0, 0, 0, 0,
                      1, 0, 0, 0, 0,
                      0, 1, 1, 1, 0,
                      1, 0, 0, 0, 0,
                      1, 0, 0, 0, 0,
                      0, 1, 1, 1, 1]]

        global TrainingList
        TrainingList = [[0]*35 for i in range(300)]

        global NeuronList
        for i in range(10):
            NeuronList.append(_neuron(35, 1, 0, 1000))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Button4.setText(_translate("MainWindow", "Reset"))
        self.Button2.setText(_translate("MainWindow", "Add Noise"))
        self.Button1.setText(_translate(
            "MainWindow", "Generate Noise\n+ Train"))
        self.Button3.setText(_translate("MainWindow", "Determine Sample"))

    def Button1Pressed(self):
        global TrainingList
        TrainingList = noiseMaker.generateSamples(NumberList)

        global LoopValue
        LoopValue = 0

        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.showSamples)
        self.timer.start(10)

        def train():
            for n in range(10):
                i = 0
                training_set_in = []
                training_set_target = []
                for number in range(10):
                    for sample in range(30):
                        training_set_in.append(TrainingList[i])
                        i += 1
                        target = 0
                        if(n == number):
                            target = 1
                        training_set_target.append(target)
                NeuronList[n].train(training_set_in, training_set_target)

        t = threading.Thread(target=train)
        t.start()

        global HasTrained
        HasTrained = True

        global TrainedNumberList
        TrainedNumberList = copy.deepcopy(NumberList)

    def showSamples(self):
        global LoopValue
        LoopValue += 1
        self.LeftGraphics.update()
        if LoopValue == 298:
            self.timer.stop()

    def Button2Pressed(self):
        NumberList[SpinValue] = noiseMaker.createNoise(
            1, NumberList[SpinValue])
        self.CentralGraphics.update()

    def Button4Pressed(self):
        NumberList[SpinValue] = OriginalList[SpinValue]
        self.CentralGraphics.update()

    def Button3Pressed(self):
        global determined
        determined = False
        global DeterminedValue

        for i in range(10):
            if(NeuronList[i].activateNeuron(NumberList[SpinValue]) == 1):
                determined = True
                DeterminedValue = i
                break

        self.RightGraphics.update()

    def SpinChanged(self):
        global SpinValue
        SpinValue = self.SpinBox.value()
        self.CentralGraphics.update()


class centralFrame(QWidget):
    def __init__(self, container):
        super().__init__(container)

    def paintEvent(self, event):
        painter = QPainter()
        painter.begin(self)

        painter.setPen(QPen(QColor(180, 180, 180), 1, Qt.SolidLine))
        i = SpinValue
        j = 0
        for ii in range(7):
            for jj in range(5):
                value = int((1 - NumberList[i][j]) * 255)
                color = QColor(value, value, value)
                painter.setBrush(QBrush(color, Qt.SolidPattern))
                painter.drawRect(71*jj, 71*ii, 71, 71)
                j += 1

        painter.end()

    def mousePressEvent(self, event):
        i = SpinValue
        jj = int(event.x()/71)
        ii = int(event.y()/71)
        j = ii * 5 + jj
        if NumberList[i][j] > 0:
            NumberList[i][j] = 0
        else:
            NumberList[i][j] = 1
        self.update()


class leftFrame(QWidget):
    def __init__(self, container):
        super().__init__(container)

    def paintEvent(self, event):
        painter = QPainter()
        painter.begin(self)

        i = LoopValue
        if sum(TrainingList[i]) == 0:
            return
        color = QColor(180, 180, 180)
        painter.setPen(QPen(color, 1, Qt.SolidLine))

        j = 0
        for ii in range(7):
            for jj in range(5):
                value = int((1 - TrainingList[i][j]) * 255)
                color = QColor(value, value, value)
                painter.setBrush(QBrush(color, Qt.SolidPattern))
                painter.drawRect(40*jj + 0, 40*ii + 0, 40, 40)
                j += 1

        painter.end()


class rightFrame(QWidget):
    def __init__(self, container):
        super().__init__(container)

    def paintEvent(self, event):
        painter = QPainter()
        painter.begin(self)

        i = DeterminedValue
        if i < 0:
            return
        color = QColor(180, 180, 180)
        painter.setPen(QPen(color, 1, Qt.SolidLine))

        if(determined == False or HasTrained == False or TrainedNumberList == None):
            drawnList = ErrorList
            i = 0
        else:
            drawnList = TrainedNumberList

        j = 0
        for ii in range(7):
            for jj in range(5):
                value = int((1 - drawnList[i][j]) * 255)
                color = QColor(value, value, value)
                painter.setBrush(QBrush(color, Qt.SolidPattern))
                painter.drawRect(40*jj + 0, 40*ii + 0, 40, 40)
                j += 1

        painter.end()


class noiseMaker:
    @staticmethod
    def generateSamples(inputList):
        outputList = [[0]*35 for i in range(300)]
        j = 0
        for number in range(10):
            for sample in range(30):
                outputList[j] = noiseMaker.createNoise(
                    sample, inputList[number])
                j += 1

        return outputList

    @staticmethod
    def createNoise(intensity, inputList):
        outputList = inputList.copy()
        for n in range(intensity):
            for i in range(len(inputList)):
                percentage = random.random()
                if(percentage < 0.15):
                    outputList[i] += 0.09 if outputList[i] < 0.5 else -0.09

        return outputList


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())